#!/bin/sh

# Based on https://github.com/james-nesbitt/pinentry-fuzzel/blob/main/pinentry-fuzzel


# LOG(message)
#   message - the text to log
#
# This function logs messages using the system logger, tagging them with the script name and process ID.
#
# The tag consists of:
#   - `${0}`: The name of the script or function being executed. This helps
#     identify where the log entry originates.
#   - `$$`: The process ID (PID) of the current script. This ensures that log
#     messages can be traced back to the specific instance of the script running.
function LOG() {
  /usr/bin/logger -t "$0 [$$]" "$@";
}


# pinentry_cli()
#
# Runs cli-based pinentry program
function pinentry_cli()
{
  exec /usr/bin/pinentry
}


# pinentry_gui()
#
# Runs custom fuzzel-based GUI pinentry program
function pinentry_gui()
{
  # Base command and misc variables
  DESC=""
  PROMPT=""

  echo "OK Please go ahead"
  while read cmd args; do
    LOG "RAW=< ${cmd} ${args} >"
    LOG "cmd=< ${cmd} > args=< ${args} >"

    case "${cmd}" in
      GETINFO)
        case "${args}" in
          flavor)
            LOG "Getting info 'flavor'..."
            echo "D fuzzel"
            echo "OK"
          ;;

          version)
            LOG "Getting info 'version'..."
            echo "D 0.1"
            echo "OK"
          ;;

          ttyinfo)
            LOG "Getting info 'ttyinfo'..."
            echo "D - - -"
            echo "OK"
          ;;

          pid)
            LOG "Getting info 'pid'..."
            echo "D $$"
            echo "OK"
          ;;

          *)
            LOG "Unknown argument '${args}' for GETINFO..."
            echo "OK"
          ;;
        esac
      ;;

      SETDESC)
        LOG "Setting description..."
        DESC=$(printf '%b' "${args//%/\\x}")
        echo "OK"
      ;;

      SETERROR)
        LOG "Handling error..."
        notify CRITICAL "ERROR" "Invalid password, please try again" >/dev/null 2>&1
        echo "OK"
      ;;

      SETPROMPT)
        LOG "Setting prompt text..."
        PROMPT="${args}"
        echo "OK"
      ;;

      GETPIN | getpin)
        LOG "Getting PIN..."
        notify NORMAL "${DESC}" >/dev/null 2>&1
        echo -e "D $(fuzzel --prompt-only="${PROMPT} " --cache /dev/null --password --dmenu)"
        echo "OK"
      ;;

      BYE | bye)
        LOG "Exiting..."
        echo "OK closing connection"
        exit 0
      ;;

      *)
        LOG "Invalid command received..."
        echo "OK"
      ;;
    esac
  done
}


# If there is a graphical environment, use custom fuzzel pinentry
# Otherwise, fall back to normal CLI pinentry
if [ -z "${WAYLAND_DISPLAY}" ]; then
  pinentry_cli
else
  pinentry_gui
fi

