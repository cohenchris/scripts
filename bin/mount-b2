#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# b2_mount(mount_dir)
#   mount_dir - directory at which we should mount the Backblaze bucket
#
# Mount remote Backblaze bucket to a local directory
function b2_mount()
{
  local mount_bucket="${1}"
  local mount_dir="${2}"

  require var "${mount_bucket}"
  require var "${mount_dir}"

  # Ensure that there is a proper config for "backblaze" with rclone
  local remotes=$(rclone listremotes)
  local found=0

  for remote in "${remotes}"; do
      # Check if the string is in the current remote name
      if [[ "${remote}" == "backblaze:" ]]; then
          found=1
          break
      fi
  done

  if [ "${found}" -eq 0 ]; then
    echo "ERROR: No remote named \"backblaze\". Please create one using rclone config."
    exit 1
  fi
  
  if [ -n "$(ls -A "${mount_dir}" 2>/dev/null)" ]; then
    echo "ERROR: directory \"${mount_dir}\" is not empty, cannot mount..."
    exit 1
  fi

  mkdir -p "${mount_dir}"

  echo "Mounting Backblaze bucket ${mount_bucket}..."
  rclone mount "backblaze:${mount_bucket}" "${mount_dir}" --daemon --vfs-cache-mode full

  if [ $? -ne 0 ]; then
    echo "ERROR: Backblaze mounting failed, please check rclone and .env configuration..."

    if [ -n "$(ls -A "${mount_dir}" 2>/dev/null)" ]; then
      echo "ERROR: directory \"${mount_dir}\" is not empty, cannot remove..."
    else
      rm -r "${mount_dir}"
    fi

    exit 1
  fi

  echo "Backblaze bucket \"${mount_bucket}\" successfully mounted at \"${mount_dir}\"!"
}


# b2_unmount(mount_dir)
#   mount_dir - local directory where Backblaze bucket is mounted
#
# Unmount Backblaze bucket from local directory
function b2_unmount()
{
  local mount_dir="$1"
  require var "${mount_dir}"

  if [ ! -d "${mount_dir}" ]; then
    echo "Failed to unmount - directory \"${mount_dir}\" does not exist..."
    exit 1
  fi

  echo "Unmounting Backblaze bucket..."
  fusermount3 -u "${mount_dir}"

  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to unmount \"${mount_dir}\"..."
    exit 1
  fi

  if [ -n "$( ls -A "${mount_dir}" 2>/dev/null)" ]; then
    echo "WARNING: directory ${mount_dir} is not empty, cannot remove..."
  else
    echo "Removing directory ${mount_dir}..."
    rm -r ${mount_dir}
  fi
}

CMD="${1}"

if ! [[ -n "${CMD}" ]]; then
  echo "Usage: b2-fuse.sh mount [bucket] [mount_dir]"
  echo "       b2-fuse.sh unmount [mount_dir]"
  exit 1
fi

if [ "${CMD}" == "mount" ]; then
  b2_mount "${2}" "${3}"
elif [ "${CMD}" == "unmount" ] || [ "${CMD}" == "umount" ]; then
  b2_unmount "${2}"
else
  echo "Usage: b2-fuse.sh mount [bucket] [mount_dir]"
  echo "       b2-fuse.sh unmount [mount_dir]"
  exit 1
fi
